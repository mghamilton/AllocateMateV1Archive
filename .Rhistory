pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
pedigree["DAM"] %in gen_known
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
pedigree["DAM"] %in% gen_known
pedigree[,"DAM"] %in% gen_known
pedigree[pedigree[,"DAM"] %in% gen_known,"DAM_GEN"]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
gen_known
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "ID_DAM")
pedigree[,colnames(pedigree) != "DAM_GEN"]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "GEN")
pedigree <- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
pedigree
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
gen_known
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
gen_known
pedigree[pedigree[,"DAM"] %in% gen_known,]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
tmp <- pedigree
tmp
pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known)
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("ID", "DAM_GEN")
gen_known
tmp <- pedigree
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "DAM_GEN")
tmp <- merge(tmp,gen_known)
tmp
tmp <- pedigree
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "DAM_GEN")
tmp <- merge(tmp, gen_known, by = "DAM")
colnames(gen_known) <- c("SIRE", "SIRE_GEN")
tmp <- merge(tmp, gen_known, by = "SIRE")
rm(gen_known)
tmp
tmp[,"ID_GEN"] <-  (tmp[,"DAM_GEN"] + tmp[,"SIRE_GEN"])/2 + 1
tmp
colnames(pedigree)
pedigree <- ped
pedigree
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
pedigree
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
gen_unknown
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
tmp
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp[,()], by = "DAM")
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown
gen_unknown[,colnames(gen_known)]
1+ NA
NA+NA
pedigree<- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
While(sum(is.na( pedigree[,"ID_GEN"])) > 0) {
(sum(is.na( pedigree[,"ID_GEN"])) > 0)
pedigree<- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown[,colnames(gen_known)]
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow(pedigree)) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
sum(is.na(pedigree[,"ID_GEN"]))
iteration <- 0
nrow_ped  <- nrow(pedigree)
nrow_ped
pedigree <- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped)) {
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
pedigree
ped.order <- function (pedigree)
{
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
return(pedigree[,c("ID", "DAM", "SIRE")])
}
ped.order(ped)
str(ped.order(ped))
str(ped)
ped.order(pedigree = ped)
pedigree[order(pedigree[,"ID_GEN"]),]
pedigree[order(pedigree[,"ID"]),]
ped.order <- function (pedigree) {
#order pedigree to ensure and individual is listed in ID is before SIRE and DAM
pedigree <- pedigree[order(pedigree[,"ID"]),]
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
return(pedigree[,c("ID", "DAM", "SIRE")])
}
library(AllocateMate)
setwd("C:/Users/mhamilton/OneDrive - CGIAR/Current/Africa/Profishblue training/allocateMate errors")
library(AllocateMate)
ped = read.csv("pedigree_file.csv")
parents = read.csv("ebvs_and_details.csv")
#assuming that the DAMs and SIREs in 'parents' are unrelated
ancestors = unique(data.frame(ID = as.character(unique(c(ped$DAM,ped$SiRE))),
DAM = 0,
SIRE = 0))
ped <- rbind(ancestors,ped)
head(ped,15)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("~/.active-rstudio-document", echo=TRUE)
output
AGHmatrix::Amatrix
set.column
check.parents
check.n_fam_crosses
devtools::document()
devtools::document()
dplyr::left_join(NA,NA)
dplyr::left_join(TRUE,TRUE)
dplyr::filter
tmp <- dplyr::filter
tmp
devtools::document()
gen_unknown
library(AllocateMate)
#Retrieve example data
ped <- AllocateMate::ped
ped
allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
library(AllocateMate)
#Retrieve example data
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
load("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/data/ped.rda")
ped
tmp <- unique(c(ped[,"DAM"], ped[,"SIRE"]))
tmp <- tmp[tmp != 0]
tmp <- tmp[!is.na(tmp)]
tmp[tmp %in% ped[,"ID"]]
tmp[!tmp %in% ped[,"ID"]]
getwd)
getwd()
setwd("C:/Users/MHamilton.CGIARAD/Desktop)
setwd("C:/Users/MHamilton.CGIARAD/Desktop")
setwd("C:/Users/MHamilton.CGIARAD/Desktop")
write.csv(ped,"ped.csv")
load("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/data/parents.rda")
write.csv(parents,"parents.csv")
read.csv("parents.csv")
read.csv("parents.csv")
ped2 <- read.csv("parents.csv")
ped2
getwd()
ped2 <- read.csv("C:/Users/MHamilton.CGIARAD/Desktop/ped.csv")
ped2
str(ped2)
ped2$SIRE <- as.character(ped2$SIRE )
ped2$DAM <- as.character(ped2$DAM )
ped2$SIRE <- as.character(ped2$SIRE )
str(ped2)
save(ped2, file = "C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/data/ped.rda")
library(AllocateMate)
ped <- AllocateMate::ped
load("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/data/ped.rda")
ped
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents <- AllocateMate::parents
ped <- AllocateMate::ped
library(AllocateMate)
ped <- AllocateMate::ped
load("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/data/H.rda")
str(H)
roxygen2::roxygenise()
setwd("AllocateMate")
getwd()
roxygen2::roxygenise()
ped <- AllocateMate::ped
parents <- AllocateMate::parents
library(AllocateMate)
install.packages("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/AllocateMate_1.3.tar.gz", repos = NULL, type="source")
install.packages(c("lpSolveAPI", "dplyr", "AGHmatrix"))
install.packages(c("lpSolveAPI", "dplyr", "AGHmatrix"))
install.packages(c("lpSolveAPI", "dplyr", "AGHmatrix"))
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate")
install.packages(c("lpSolveAPI", "dplyr", "AGHmatrix"))
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate")
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
help ("allocate.mate.ped")
source("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/R/peripheral_functions.R", echo=TRUE)
#' allocate.mate.ped
#'
#' @description
#' This function generates a mating list for a set of parents.
#' The mating list can be generated i) to minimise the average inbreeding coefficient (F) of families generated or ii) according to assortative mating principles.
#' Inputs include a list of parents and a 3-column pedigree file specifying the ancestry of these candidates.
#' @param ped is a 3-column dataframe with the following columns (class in parentheses):
#' \itemize{
#'  \item{'ID' is the individual identifier of parents and their ancestors (character).}
#'  \item{'DAM' is the identifier of the individual's dam (NA if unknown) (character).}
#'  \item{'SIRE' is the identifier of the individual's sire (NA if unknown) (character).}
#' }
#' @param parents data frame with the following columns (class in parentheses):
#' \itemize{
#'  \item{'ID' is the individual identifier (character).}
#'  \item{'SEX' is the sex of the individual - 'M' or 'F', for male and female respectively (character).}
#'  \item{'EBV' Estimated breeding value (EBV) of the individual - can not be NA if applying assortative mating as the method (numeric).}
#'  \item{'N_AS_PARENT' The number of families the indivdiual is to contribute to (integer).}
#' }
#' @param max_F is the maxiumum inbreeding coefficient allowed in the offspring of parents (numeric between 0 and 1)
#' @param method either 'min_F' (to minimise the average inbreeding in offspring) or 'assortative' (to apply assortative mating) (character)
#' @param n_fam_crosses is the maximum number of siblings from one family allowed to be crossed with siblings of another family.  This represents a constraint on the generation of 'double first cousins'. (integer)
#' @return 'summary' is a data frame containing a summary of all possible families generated from crosses between parents:
#' \itemize{
#'  \item{'SELECTED' N represents unselected families, Y represents selected families (i.e. mate allocations to be generated) and All represents all possible families.}
#'  \item{'COUNT_FAMS' count of families.}
#'  \item{MEAN_EBV' mean of family EBVs.}
#'  \item{'SD_EBV' standard deviation of family EBVs.}
#'  \item{'MIN_EBV' minimum of family EBVs.}
#'  \item{'MIN_EBV' maximum of family EBVs.}
#'  \item{MEAN_EBV' mean of family inbreeding coefficients (F).}
#'  \item{'SD_EBV' standard deviation of family inbreeding coefficients (F).}
#'  \item{'MIN_EBV' minimum of family inbreeding coefficients (F).}
#'  \item{'MIN_EBV' maximum of family inbreeding coefficients (F).}
#' }
#' @return 'all_families' is a data frame containing details of all possible families able to be generted from matings between parents:
#' \itemize{
#'  \item{'SIRE' male parent.}
#'  \item{'DAM' female parent.}
#'  \item{'F' inbreeding coefficient of family members (i.e. the 'family F').}
#'  \item{'EBV' mean of parent EBVs (i.e. the 'family EBV').}
#'  \item{'SELECTED' N represents an unselected family (i.e. family is not to be generated), Y represents a selected family (i.e. mate allocated - family to be generated).}
#' }
#' @return 'optimal_families' is a data frame containing details of mate allocations (i.e.families to be generated from matings between parents):
#' \itemize{
#'  \item{'SIRE' male parent.}
#'  \item{'DAM' female parent.}
#'  \item{'F' inbreeding coefficient of family members (i.e. the 'family F').}
#'  \item{'EBV' mean of parent EBVs (i.e. the 'family EBV').}
#' }
#' @examples
#' #Retrieve example data
#' ped <- AllocateMate::ped
#' parents <- AllocateMate::parents
#'
#' output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
#' output$summary
#' head(output$all_families)
#' head(output$optimal_families)
#' @import lpSolveAPI
#' @import AGHmatrix
#' @import dplyr
#' @export
# @import nadiv
#if("nadiv" %in% installed.packages()[, "Package"] == F) {install.packages("nadiv")}
#library(nadiv)
#library(lpSolveAPI)
#library(AGHmatrix)
#library(dplyr)
check.parents(parents)
rm(list=ls())
setwd("C:/Users/mhamilton/CGIAR/WorldFish DocuShare - GIFT/Spawn rounds/G202401/03 Second batch mating list")
parents <- readxl::read_xlsx("All data.xlsx", sheet = "AllocateMate_parents")
parents <- as.data.frame(parents)[,1:4]
ped <- readxl::read_xlsx("All data.xlsx", sheet = "AllocateMate_ped")
ped <- as.data.frame(ped)
ped <- nadiv::prepPed(ped)
ped <- nadiv::prunePed(ped, parents$ID)
library(AllocateMate)
#if("nadiv" %in% installed.packages()[, "Package"] == F) {install.packages("nadiv")}
#library(nadiv)
#library(lpSolveAPI)
#library(AGHmatrix)
#library(dplyr)
check.parents(parents)
source("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/R/peripheral_functions.R", echo=TRUE)
#if("nadiv" %in% installed.packages()[, "Package"] == F) {install.packages("nadiv")}
#library(nadiv)
#library(lpSolveAPI)
#library(AGHmatrix)
#library(dplyr)
check.parents(parents)
check.ped(ped)
check.ped2(ped)
check.n_fam_crosses(n_fam_crosses)
max_F = 0.08
method="assortative"
n_fam_crosses = 1
#if("nadiv" %in% installed.packages()[, "Package"] == F) {install.packages("nadiv")}
#library(nadiv)
#library(lpSolveAPI)
#library(AGHmatrix)
#library(dplyr)
check.parents(parents)
check.ped(ped)
check.ped2(ped)
check.n_fam_crosses(n_fam_crosses)
check.max_F(max_F)
check.method(method)
ped <- reduce.ped(ped = ped, parents = parents)
#ped <- nadiv::prunePed(ped = ped, phenotyped = parents$ID)
ped[ped$DAM  == 0 & !is.na(ped$DAM), "DAM"]  <- NA
ped[ped$SIRE == 0 & !is.na(ped$SIRE),"SIRE"] <- NA
# ped <- nadiv::prepPed(ped = ped)
ped <- ped.order(pedigree = ped)
AGHmatrix::Amatrix(ped)
H <- AGHmatrix::Amatrix(ped)
ped
Amatrix(ped)
library(AGHmatrix)
Amatrix(ped)
parents <- readxl::read_xlsx("All data.xlsx", sheet = "AllocateMate_parents")
parents <- as.data.frame(parents)[,1:4]
ped <- readxl::read_xlsx("All data.xlsx", sheet = "AllocateMate_ped")
ped <- as.data.frame(ped)
ped <- nadiv::prepPed(ped)
#if("nadiv" %in% installed.packages()[, "Package"] == F) {install.packages("nadiv")}
#library(nadiv)
#library(lpSolveAPI)
#library(AGHmatrix)
#library(dplyr)
check.parents(parents)
check.ped(ped)
check.ped2(ped)
check.n_fam_crosses(n_fam_crosses)
check.max_F(max_F)
check.method(method)
ped <- reduce.ped(ped = ped, parents = parents)
#ped <- nadiv::prunePed(ped = ped, phenotyped = parents$ID)
ped[ped$DAM  == 0 & !is.na(ped$DAM), "DAM"]  <- NA
ped[ped$SIRE == 0 & !is.na(ped$SIRE),"SIRE"] <- NA
# ped <- nadiv::prepPed(ped = ped)
ped <- ped.order(pedigree = ped)
ped[is.na(ped$DAM), "DAM"]  <- 0
ped[is.na(ped$SIRE),"SIRE"] <- 0
H <- AGHmatrix::Amatrix(ped)
rm(list=ls())
setwd("C:/Users/mhamilton/CGIAR/WorldFish DocuShare - GIFT/Spawn rounds/G202401/03 Second batch mating list")
parents <- readxl::read_xlsx("All data.xlsx", sheet = "AllocateMate_parents")
parents <- as.data.frame(parents)[,1:4]
ped <- readxl::read_xlsx("All data.xlsx", sheet = "AllocateMate_ped")
ped <- as.data.frame(ped)
ped <- nadiv::prepPed(ped)
#ped <- nadiv::prunePed(ped, parents$ID)
library(AllocateMate)
output <- allocate.mate.ped(ped=ped,parents=parents, max_F = 0.08, method="assortative", n_fam_crosses = 1)
mate_list <- output$optimal_families
fams <- readxl::read_xlsx("All data.xlsx", sheet = "G202301 individuals")[,c("INDIV", "FAM")]
colnames(fams) <- c("SIRE", "FAM_SIRE")
mate_list <- left_join(mate_list, fams)
source("C:/Users/mhamilton/CGIAR/WorldFish DocuShare - GIFT/Spawn rounds/G202401/03 Second batch mating list/AllocateMate.R", echo=TRUE)
source("C:/Users/mhamilton/CGIAR/WorldFish DocuShare - GIFT/Spawn rounds/G202401/03 Second batch mating list/AllocateMate.R", echo=TRUE)
source("C:/Users/mhamilton/CGIAR/WorldFish DocuShare - GIFT/Spawn rounds/G202401/03 Second batch mating list/AllocateMate.R", echo=TRUE)
source("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/R/peripheral_functions.R", echo=TRUE)
rm(list=ls())
library(AllocateMate)
setwd("C:/Users/mhamilton/CGIAR/WorldFish DocuShare - GIFT/Spawn rounds/G202302_TiLV/03 Mate allocation")
parents <- read.csv("parents.csv")
parents <- parents[parents$N_AS_PARENT != 0,]
ped <- read.csv("ped.csv")
ped <- nadiv::prepPed(ped)
ped <- nadiv::prunePed(ped, parents$ID)
ped <- nadiv::prepPed(ped)
#output <- allocate.mate.ped(ped = ped, parents = parents, max_F = 0.1, method = "assortative", n_fam_crosses = 1)
max_F = 0.1
method = "assortative"
n_fam_crosses = 1
check.parents(parents)
source("C:/Users/MHamilton.CGIARAD/Desktop/AllocateMate/R/peripheral_functions.R", echo=TRUE)
library(AllocateMate)
setwd("C:/Users/mhamilton/CGIAR/WorldFish DocuShare - GIFT/Spawn rounds/G202302_TiLV/03 Mate allocation")
parents <- read.csv("parents.csv")
parents <- parents[parents$N_AS_PARENT != 0,]
ped <- read.csv("ped.csv")
ped <- nadiv::prepPed(ped)
ped <- nadiv::prunePed(ped, parents$ID)
ped <- nadiv::prepPed(ped)
#output <- allocate.mate.ped(ped = ped, parents = parents, max_F = 0.1, method = "assortative", n_fam_crosses = 1)
max_F = 0.1
method = "assortative"
n_fam_crosses = 1
#mhamilton@cgiar.org
#Feb 2021
#if("nadiv" %in% installed.packages()[, "Package"] == F) {install.packages("nadiv")}
#library(nadiv)
#library(lpSolveAPI)
#library(AGHmatrix)
#library(dplyr)
check.parents(parents)
parents
