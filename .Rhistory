library(AllocateMate)
library(AllocateMate)
max_F = 1
method = "min_F"
n_fam_crosses = 1
nadiv::prepPed(ped = ped)
library(AllocateMate)
library(AllocateMate)
library(AllocateMate)
library(AllocateMate)
library(AllocateMate)
head(ped)
prepPed()
prepPed
nadiv::prepPed
pedigree
setwd("C:/Users/mhamilton/OneDrive - CGIAR/Current/Africa/Profishblue training/allocateMate errors")
ped = read.csv("pedigree_file.csv")
parents = read.csv("ebvs_and_details.csv")
#assuming that the DAMs and SIREs in 'parents' are unrelated
ancestors = unique(data.frame(ID = as.character(unique(c(ped$DAM,ped$SiRE))),
DAM = 0,
SIRE = 0))
ped <- rbind(ancestors,ped)
head(ped,15)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
setwd("C:/Users/mhamilton/OneDrive - CGIAR/Current/Africa/Profishblue training/allocateMate errors")
library(AllocateMate)
ped = read.csv("pedigree_file.csv")
parents = read.csv("ebvs_and_details.csv")
#assuming that the DAMs and SIREs in 'parents' are unrelated
ancestors = unique(data.frame(ID = as.character(unique(c(ped$DAM,ped$SiRE))),
DAM = 0,
SIRE = 0))
ped <- rbind(ancestors,ped)
head(ped,15)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
pedigree[, 1] == "*"
pedigree = ped
pedigree[, 1] == "*"
sum(pedigree[, 1] == 0 | pedigree[, 1] ==
"0" | pedigree[, 1] == "*" | is.na(pedigree[, 1])))
(sum(pedigree[, 1] == 0 | pedigree[, 1] ==
"0" | pedigree[, 1] == "*" | is.na(pedigree[, 1])))
(sum(pedigree[, 1] == 0 | pedigree[, 1] ==
"0" | pedigree[, 1] == "*" | is.na(pedigree[, 1])) > 0)
pedigree[!is.na(pedigree[, 2]), 2]
sum(pedigree[(pedigree[, 1] != 0 & pedigree[, 1] != "0" & !is.na(pedigree[, 1]), 2] %in%
pedigree[(pedigree[, 1] != 0 & pedigree[, 1] != "0" & !is.na(pedigree[, 1]))
pedigree[(pedigree[, 1] != 0 & pedigree[, 1] != "0" & !is.na(pedigree[, 1])), 2] %
pedigree[(pedigree[, 1] != 0 & pedigree[, 1] != "0" & !is.na(pedigree[, 1])), 2]
pedigree[(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])), 2]
pedigree[(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3])), 3]
sum(pedigree[(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])), 2] %in%
pedigree[(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3])), 3])
(sum(pedigree[(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])), 2] %in%
pedigree[(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3])), 3]) > 0)
if (sum(pedigree[(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])), 2] %in%
pedigree[(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3])), 3]) > 0) {
warning("Dams appearing as Sires - selfing in pedigree")
}
if (sum(pedigree[, 1] == 0 | pedigree[, 1] == "0" | is.na(pedigree[, 1])) > 0) {
stop("Missing value in the ID column in \'ped\'")
}
countGen
if (sum(duplicated(pedigree[, 1])) > 0) {
stop("Some individuals appear more than once in \'ped\'")
}
pedigree[(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])), 2]
pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2]
pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2], 2]
(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])
)
(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3]))
(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3]))
((pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3])))
((pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3]))) |
((pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])) &
(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])))
if(sum(
((pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3]))) |
((pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])) &
(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])))
) > 0) {
stop("If an individual is not a founder (i.e. both parents are unknown), both the SIRE and DAM must be specified in \'ped\'.  It may be necessary to define new founders")
}
pedigree[1,2] <- "adsf"
if(sum(
((pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] != 0 & pedigree[, 3] != "0" & !is.na(pedigree[, 3]))) |
((pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])) &
(pedigree[, 2] != 0 & pedigree[, 2] != "0" & !is.na(pedigree[, 2])))
) > 0) {
stop("If an individual is not a founder (i.e. both parents are unknown), both the SIRE and DAM must be specified in \'ped\'.  It may be necessary to define new founders")
}
pedigree <- ped
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),]
pedigree[,"GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"GEN"] <- 0
pedigree
pedigree[,"ID_GEN"] <- NA
pedigree[,"DAM_GEN"] <- NA
pedigree[,"SIRE_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
pedigree
#remove ID if not a DAM or SIRE
pedigree[,"ID_GEN"] <- NA
pedigree[,"DAM_GEN"] <- NA
pedigree[,"SIRE_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
pedigree
(sum(is.na(ID_GEN) > 0)
)
(sum(is.na( pedigree[,"ID_GEN"]) > 0))
sum(is.na( pedigree[,"ID_GEN"])
(sum(is.na( pedigree[,"ID_GEN"])) > 0)
)
sum(is.na( pedigree[,"ID_GEN"]))
sum(is.na( pedigree[,"ID_GEN"])) > 0
(sum(is.na( pedigree[,"ID_GEN"])) > 0)
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),c("DAM_GEN", "SIRE_GEN")] <- -1
pedigree
pedigee[!is.na(pedigee["ID_GEN"]),"ID"]
pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
pedigree["DAM"] %in gen_known
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
pedigree["DAM"] %in% gen_known
pedigree[,"DAM"] %in% gen_known
pedigree[pedigree[,"DAM"] %in% gen_known,"DAM_GEN"]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
gen_known
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "ID_DAM")
pedigree[,colnames(pedigree) != "DAM_GEN"]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "GEN")
pedigree <- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
pedigree
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
gen_known
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
gen_known
pedigree[pedigree[,"DAM"] %in% gen_known,]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),"ID"]
tmp <- pedigree
tmp
pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known)
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("ID", "DAM_GEN")
gen_known
tmp <- pedigree
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "DAM_GEN")
tmp <- merge(tmp,gen_known)
tmp
tmp <- pedigree
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),c("ID", "ID_GEN")]
colnames(gen_known) <- c("DAM", "DAM_GEN")
tmp <- merge(tmp, gen_known, by = "DAM")
colnames(gen_known) <- c("SIRE", "SIRE_GEN")
tmp <- merge(tmp, gen_known, by = "SIRE")
rm(gen_known)
tmp
tmp[,"ID_GEN"] <-  (tmp[,"DAM_GEN"] + tmp[,"SIRE_GEN"])/2 + 1
tmp
colnames(pedigree)
pedigree <- ped
pedigree
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
pedigree
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
gen_unknown
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
tmp
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp[,()], by = "DAM")
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown
gen_unknown[,colnames(gen_known)]
1+ NA
NA+NA
pedigree<- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
While(sum(is.na( pedigree[,"ID_GEN"])) > 0) {
(sum(is.na( pedigree[,"ID_GEN"])) > 0)
pedigree<- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown[,colnames(gen_known)]
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow(pedigree)) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
sum(is.na(pedigree[,"ID_GEN"]))
iteration <- 0
nrow_ped  <- nrow(pedigree)
nrow_ped
pedigree <- ped
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped)) {
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
pedigree
ped.order <- function (pedigree)
{
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
return(pedigree[,c("ID", "DAM", "SIRE")])
}
ped.order(ped)
str(ped.order(ped))
str(ped)
ped.order(pedigree = ped)
pedigree[order(pedigree[,"ID_GEN"]),]
pedigree[order(pedigree[,"ID"]),]
ped.order <- function (pedigree) {
#order pedigree to ensure and individual is listed in ID is before SIRE and DAM
pedigree <- pedigree[order(pedigree[,"ID"]),]
pedigree[,"ID_GEN"] <- NA
pedigree[(pedigree[, 2] == 0 | pedigree[, 2] == "0" | is.na(pedigree[, 2])) &
(pedigree[, 3] == 0 | pedigree[, 3] == "0" | is.na(pedigree[, 3])),"ID_GEN"] <- 0
iteration <- 0
nrow_ped  <- nrow(pedigree)
while(sum(is.na(pedigree[,"ID_GEN"])) > 0) {
gen_known <- pedigree[!is.na(pedigree["ID_GEN"]),]
gen_unknown <- pedigree[is.na(pedigree["ID_GEN"]),]
tmp <- gen_known[,c("ID", "ID_GEN")]
colnames(tmp) <- c("DAM", "DAM_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "DAM")
colnames(tmp) <- c("SIRE", "SIRE_GEN")
gen_unknown <- merge(gen_unknown, tmp, by = "SIRE")
gen_unknown[,"ID_GEN"] <-  (gen_unknown[,"DAM_GEN"] + gen_unknown[,"SIRE_GEN"])/2 + 1
gen_unknown <- gen_unknown[,colnames(gen_known)]
pedigree <- rbind(gen_known, gen_unknown)
rm(tmp, gen_known, gen_unknown)
if(iteration > nrow_ped) {
stop("Unknown issue when ordering pedigree so that ID listed before it is a DAM or SIRE")
}
iteration + 1
}
return(pedigree[,c("ID", "DAM", "SIRE")])
}
library(AllocateMate)
setwd("C:/Users/mhamilton/OneDrive - CGIAR/Current/Africa/Profishblue training/allocateMate errors")
library(AllocateMate)
ped = read.csv("pedigree_file.csv")
parents = read.csv("ebvs_and_details.csv")
#assuming that the DAMs and SIREs in 'parents' are unrelated
ancestors = unique(data.frame(ID = as.character(unique(c(ped$DAM,ped$SiRE))),
DAM = 0,
SIRE = 0))
ped <- rbind(ancestors,ped)
head(ped,15)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("~/.active-rstudio-document", echo=TRUE)
output
AGHmatrix::Amatrix
set.column
check.parents
check.n_fam_crosses
